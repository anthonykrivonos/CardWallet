{"version":3,"sources":["../../../src/@ionic-native/plugins/card-io/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAkIxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AASH,IAAa,MAAM;IAAS,0BAAiB;IAA7C;;IAgCA,CAAC;IA9BC;;;;;OAKG;IAEH,wBAAO,GAAP,cAA8B,MAAM,CAAC,CAAC,CAAC;IAEvC;;;;OAIG;IAEH,qBAAI,GAAJ,UAAK,OAAuB,IAA6B,MAAM,CAAC,CAAC,CAAC;IAElE;;;OAGG;IAEH,wBAAO,GAAP,cAA6B,MAAM,CAAC,CAAC,CAAC;IAQxC,aAAC;AAAD,CAhCA,AAgCC,CAhC2B,iBAAiB,GAgC5C;AANM,iBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,qBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAtBA;IADC,OAAO,EAAE;;;;qCAC6B;AAQvC;IADC,OAAO,EAAE;;;;kCACwD;AAOlE;IADC,OAAO,EAAE;;;;qCAC4B;AAxB3B,MAAM;IARlB,MAAM,CAAC;QACN,UAAU,EAAE,QAAQ;QACpB,MAAM,EAAE,2BAA2B;QACnC,SAAS,EAAE,QAAQ;QACnB,IAAI,EAAE,mDAAmD;QACzD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,MAAM,CAgClB;SAhCY,MAAM","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface CardIOOptions {\n\n  /**\n   * Set to true to require expiry date\n   */\n  requireExpiry?: boolean;\n\n  /**\n   * \tThe user will be prompted for the card CVV\n   */\n  requireCVV?: boolean;\n\n  /**\n   * The user will be prompted for the card billing postal code.\n   */\n  requirePostalCode?: boolean;\n\n  /**\n   * \tRemoves the keyboard button from the scan screen.\n   */\n  supressManual?: boolean;\n\n  /**\n   * The postal code will only collect numeric input. Set this if you know the expected country's postal code has only numeric postal codes.\n   */\n  restrictPostalCodeToNumericOnly?: boolean;\n\n  /**\n   * The theme for the card.io Activity's will be set to the theme of the application.\n   */\n  keepApplicationTheme?: boolean;\n\n  /**\n   * The user will be prompted for the cardholder name\n   */\n  requireCardholderName?: boolean;\n\n  /**\n   * Used to display instructions to the user while they are scanning their card.\n   */\n  scanInstructions?: string;\n\n  /**\n   * \tIf set, the card will not be scanned with the camera.\n   */\n  noCamera?: boolean;\n\n  /**\n   * If scanExpiry is true, an attempt to extract the expiry from the card image will be made.\n   */\n  scanExpiry?: boolean;\n\n  /**\n   * The preferred language for all strings appearing in the user interface. If not set, or if set to null, defaults to the device's current language setting.\n   */\n  languageOrLocale?: string;\n\n  /**\n   * Changes the color of the guide overlay on the camera. The color is provided in hexadecimal format (e.g. `#FFFFFF`)\n   */\n  guideColor?: string;\n\n  /**\n   * The user will not be prompted to confirm their card number after processing.\n   */\n  supressConfirmation?: boolean;\n\n  /**\n   * The card.io logo will not be shown overlaid on the camera.\n   */\n  hideCardIOLogo?: boolean;\n\n  /**\n   * The card.io logo will be shown instead of the PayPal logo.\n   */\n  useCardIOLogo?: boolean;\n\n  /**\n   * Once a card image has been captured but before it has been processed, this value will determine whether to continue processing as usual.\n   */\n  supressScan?: boolean;\n\n}\n\nexport interface CardIOResponse {\n\n  /**\n   * Card type\n   */\n  cardType: string;\n\n  /**\n   * Masked card number, showing only last 4 digits\n   */\n  redactedCardNumber: string;\n\n  /**\n   * Full card number\n   */\n  cardNumber: string;\n\n  /**\n   * Expiry month\n   */\n  expiryMonth: number;\n\n  /**\n   * Expiry year\n   */\n  expiryYear: number;\n\n  /**\n   * CVV\n   */\n  cvv: string;\n\n  /**\n   * Postal code\n   */\n  postalCode: string;\n\n  /**\n   * Cardholder name\n   */\n  cardholderName: string;\n\n}\n\n/**\n * @name Card IO\n * @description\n * @usage\n * Note: For use with iOS 10 + When building your app with the iOS 10 SDK +, you have to add some info to the info.plist file. This is due to increased security in iOS 10. Go to your app directory and search for the <your app name>Info.plist file. Add the following lines in the main <dict> element.\n * ```xml\n *<key>NSCameraUsageDescription</key>\n *<string>To scan credit cards.</string>\n *```\n * ```typescript\n * import { CardIO } from '@ionic-native/card-io';\n *\n * constructor(private cardIO: CardIO) { }\n *\n * ...\n *\n *\n * this.cardIO.canScan()\n *   .then(\n *     (res: boolean) => {\n *       if(res){\n *         let options = {\n *           requireExpiry: true,\n *           requireCVV: false,\n *           requirePostalCode: false\n *         };\n *         CardIO.scan(options);\n *       }\n *     }\n *   );\n * ```\n * @interfaces\n * CardIOOptions\n * CardIOResponse\n */\n@Plugin({\n  pluginName: 'CardIO',\n  plugin: 'card.io.cordova.mobilesdk',\n  pluginRef: 'CardIO',\n  repo: 'https://github.com/card-io/card.io-Cordova-Plugin',\n  platforms: ['Android', 'iOS']\n})\n\nexport class CardIO extends IonicNativePlugin {\n\n  /**\n   * Check whether card scanning is currently available. (May vary by\n   * device, OS version, network connectivity, etc.)\n   *\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  canScan(): Promise<boolean> { return; }\n\n  /**\n   * Scan a credit card with card.io.\n   * @param {CardIOOptions} options Options for configuring the plugin\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  scan(options?: CardIOOptions): Promise<CardIOResponse> { return; }\n\n  /**\n   * Retrieve the version of the card.io library. Useful when contacting support.\n   * @returns {Promise<string>}\n   */\n  @Cordova()\n  version(): Promise<string> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}